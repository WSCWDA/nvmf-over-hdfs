【NVMe-oF配置】
DataNode作为initiator，Client作为target
DataNode管理两个NVMe SSD NVMe0n1、NVMe1n1
note：必须挂载文件系统才可以使用C/C++进行文件读写

【Hadoop配置】
DataNode上存储了数据块blk信息，同时可以看到Client节点的NVMe SSD
DataNode节点需要挂载一个文件系统 ext4
Client节点需要挂载一个用户态fuse文件系统或ext4

【测试】
导出测试(get)：
DN向Client写文件数据
Condition1：DataNode (ext4) -> Client(ext4) 均挂载了文件系统ext4，这时只需要做文件的拷贝
Condition2：DataNode（ext4）-> Client(fuse) DataNode读取文件，写入到Client节点的裸设备中，同时使用fuse来管理元数据
Condition3: DataNode（fuse）-> Client(fuse) 

性能提升的关键在于1）TCP替换RDMA（HDFS流式数据传输->文件伪本地复制）2）内核态文件系统替换为用户态文件系统，裸设备和文件系统之间的性能差异
问题1：
1个DataNode可以直接复制数据到客户端的SSD中
多个DataNode同时复制时，不支持并行

导入测试(put)：
DataNode从Client读取数据
Condition1:Client(ext4) -> DataNode(ext4)
Condition2:Client(fuse) -> DataNode(ext4)
Condition3:Client(fuse) -> DataNode(fuse)

直接写入裸盘是不允许的
v1：先测试直接copy的速度，使用ext4文件系统 可以保证文件的一致性
知道路径和块号，将文件原样copy到client节点上



<property>
		<name>hadoop.tmp.dir</name> <!--hadoop临时文件的存放目录-->
　　　　<value>file:/home/hadoop-data/tmp</value>
</property>

<property> <!--namenode持久存储名字空间及事务日志的本地文件系统路径-->
		<name>dfs.namenode.name.dir</name>
　　　　<value>file:/home/hadoop-data/hdfs/name</value>
　　　　<!--目录无需预先创建，会自动创建-->
</property>
<property>  <!--DataNode存放块数据的本地文件系统路径-->
　　　　<name>dfs.datanode.data.dir</name>
　　　　<value>file:/home/hadoop-data/hdfs/data</value>
</property>


测试可分为两部分：
1.HDFS导入导出测试
2.文件系统测试

1.HDFS导入导出测试：

1）元数据生成
desc:根据hdfs fsck命令读取根目录/的元数据信息，并输出到fileblk文件中
cd hdfstest
make clean
make
生成readhdfs可执行程序
运行./readhdfs 生成filesblk和filesname文件

读取元数据并输出到fileblk文件中
source /etc/profile
source run.sh
make
./readhdfs
这个代码有bug 需要手动修改节点ip为DataNode的ip
2）文件系统分配空间
cd MFS
init.cpp-desc：通过自建的文件系统MFS，根据元数据信息（fileblk信息）分配磁盘空间,读取filesblk 输出到slave1、slave2、node文件中
cd newfs
1、删除之前的cmake cmake .
2、cd cmake-build-debug cmake ..
3、make 
./MFS
3）DataNode写入文件
writetest-desc：将生成的slave1、slave2文件复制到对应的DataNode节点中
在test文件夹下执行./writetest.cpp
有bug 
问题：编译过程中 若cmake版本提示过低，可以修改CMakeLists.txt中的版本号为当前版本号


2.文件系统测试：
两个版本：
v1 LiFS-from黎梦钰 实现了读取的功能

note：
需要安装配置libfuse
https://github.com/libfuse/libfuse
rewrite.c是没有注释版的最终代码

直接make会报错
[root@slave1 lisafuse]# make
cc    -c -o ltils.o ltils.c
ltils.c:17:18: fatal error: fuse.h: No such file or directory
 #include <fuse.h>
                  ^
compilation terminated.
make: *** [ltils.o] Error 1

编译LisaFS命令
gcc -Wall bitmap.c rewrite.c hdfslowfs.h `pkg-config fuse3 --cflags --libs` -o rewrite

赋权
chmod 777 /dev/nvme0n1

运行LiFS
mkdir fusetest
./rewrite ./fusetest/ -d /dev/nvme0n1

v2 MFS-from 陈泳豪 扩展了LiFS，但有bug
代码中需要修改参数
init_disk.cpp
FILE* disk = fopen("./disk", "r+");
改为：FILE* disk = fopen("./nvme0n1", "r+");
char *disk_path="/dev/nvme0n1";


mkdir fuse

./MFS -d fuse
重新开启一个新的终端来执行文件系统操作

这个文件系统和性能无关，主要是为了在裸盘上实现读写